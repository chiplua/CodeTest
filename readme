git push -u origin master
模式：在某情境下（context）下，针对某问题的某种解决方案。
duck:策略模式：定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。
weather:观察者模式：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
beverage:装饰者模式：动态的将责任附加到对象上，若要扩展功能， 装饰者提供了比继承更有弹性的继承方案。
pizza:工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
     :抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体类。
chocolate:单例模式:确保一个类只有一个实例，并提供一个全局访问点。
light:命令模式：将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤消的操作。
turkey:适配器模式:将一个类的接口，转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以合作无间。
	客户使用适配器的过程如下：
	1.客户通过目标接口调用适配器的方法对适配器发出请求。
	2.适配器使用被适配者接口把请求转换成被适配者的一个或多个调用接口。
	3.客户接收到调用的结果，但并未察觉这一切是适配器在起转换作用。
home:外观模式：提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。
coffee:模板方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。
transition:迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
gumballmachine:状态模式：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。
proxy:代理模式：为另一个对象提供一个替身或占位符以控制对这个对象的访问。


设计原则：
1.找出程序中会变化的方面，然后将其和固定不变的方面相分离。
2.针对接口编程，而不针对实现编程。
3.多用组合，少用继承。
4.类应该对扩展开放，对修改关闭。
5.要依赖抽象，不要依赖具体类。
6.最少知识原则：只和你的密友谈话。（即要减少对象之间的交互，只留下几个密友）
7.好莱坞原则：别调用（打电话给）我们，我们会调用（打电话给）你。
8.一个类应该只有一个引起变化的原因。


基本常识：策略模式和状态模式是双胞胎，在出生时才分开。

手边编译java文件生成.jar方法和步骤：
1.$ cat META-INF/MANIFEST.MF 
Main-Class: com.chiplua.operationjar.OperationJar
2.javac -d test src/main/java/com/chiplua/operationjar/*.java
3.jar cvfm  operation.jar  META-INF/MANIFEST.MF   -C test/  .
(把tools这个文件夹打包进jar包 jar cvfm  operation.jar  META-INF/MANIFEST.MF ./tools/aapt  -C test/  .)
4.java -jar operation.jar


在android studio中手动添加jar文件的编译和调试
1.Run->Edit Confiturations
2.最左上方点击"+", 输入name:xxxx, 指定Main Class, 指定Working directory, 指定"Use classpath of module"
3.OK
